# -*- coding: utf-8 -*-
"""IntegrateCloudCoverateRate.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nWKVMIJ7gs6tcelralJEelwt-8U7fXa0
"""
import cv2
import numpy as np
import os
import pandas as pd

# Define the function to calculate cloud coverage
def calculate_cloud_coverage(image):
    gray_image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
    _, thresholded = cv2.threshold(gray_image, 200, 255, cv2.THRESH_BINARY)
    cloud_coverage = np.sum(thresholded == 255) / np.prod(thresholded.shape)
    return cloud_coverage

# Directory to save features and images
output_dir = "/content/drive/MyDrive/PBL_Shared_Data/Generated_Images_and_Features/"
os.makedirs(output_dir, exist_ok=True)

# DataFrame to hold features
features_df = pd.DataFrame(columns=["image_path", "cloud_coverage", "timestamp"])

def generate_and_save_images(model, epoch, test_input):
    predictions = model(test_input, training=False)
    current_time = pd.Timestamp.now()  # Capture the timestamp for each generation
    for i in range(predictions.shape[0]):
        img = (predictions[i, :, :, :] * 127.5 + 127.5).numpy().astype(np.uint8)
        img_path = f"{output_dir}image_epoch_{epoch:04d}_img_{i:03d}.png"
        cv2.imwrite(img_path, cv2.cvtColor(img, cv2.COLOR_RGB2BGR))
        
        # Calculate cloud coverage and store in DataFrame
        coverage = calculate_cloud_coverage(img)
        features_df.loc[len(features_df)] = [img_path, coverage, current_time]
    
    # Save features to CSV periodically or after generation
    features_csv_path = os.path.join(output_dir, f"features_epoch_{epoch:04d}.csv")
    features_df.to_csv(features_csv_path, index=False)

    print(f"Saved images and features for epoch {epoch}")
